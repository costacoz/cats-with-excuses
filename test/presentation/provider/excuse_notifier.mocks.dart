// Mocks generated by Mockito 5.0.17 from annotations
// in riverpod_practice/test/presentation/provider/excuse_notifier.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_practice/core/errors/failures.dart' as _i6;
import 'package:riverpod_practice/core/usecases/usecase.dart' as _i8;
import 'package:riverpod_practice/core/utils/input_converter.dart' as _i10;
import 'package:riverpod_practice/core/utils/types.dart' as _i11;
import 'package:riverpod_practice/domain/entities/excuse.dart' as _i7;
import 'package:riverpod_practice/domain/repository_contracts/excuse_repository.dart'
    as _i2;
import 'package:riverpod_practice/domain/usecases/get_excuse_by_category.dart'
    as _i9;
import 'package:riverpod_practice/domain/usecases/get_random_excuse.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeExcuseRepository_0 extends _i1.Fake implements _i2.ExcuseRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetRandomExcuse].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomExcuse extends _i1.Mock implements _i4.GetRandomExcuse {
  MockGetRandomExcuse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExcuseRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeExcuseRepository_0()) as _i2.ExcuseRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Excuse>> call(_i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Excuse>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Excuse>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Excuse>>);
}

/// A class which mocks [GetExcuseByCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExcuseByCategory extends _i1.Mock
    implements _i9.GetExcuseByCategory {
  MockGetExcuseByCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExcuseRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeExcuseRepository_0()) as _i2.ExcuseRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Excuse>> call(_i9.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Excuse>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Excuse>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Excuse>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i10.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, _i11.ExcuseCategory> stringToExcuseCategory(
          String? input) =>
      (super.noSuchMethod(Invocation.method(#stringToExcuseCategory, [input]),
              returnValue: _FakeEither_1<_i6.Failure, _i11.ExcuseCategory>())
          as _i3.Either<_i6.Failure, _i11.ExcuseCategory>);
}
